// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: grpcapp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Actions_Getrecord_FullMethodName     = "/grpcapp.Actions/Getrecord"
	Actions_CheckPGdbConn_FullMethodName = "/grpcapp.Actions/CheckPGdbConn"
)

// ActionsClient is the client API for Actions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionsClient interface {
	Getrecord(ctx context.Context, in *GetrecordRequest, opts ...grpc.CallOption) (*GetrecordResponse, error)
	CheckPGdbConn(ctx context.Context, in *CheckPGdbConnRequest, opts ...grpc.CallOption) (*CheckPGdbConnResponse, error)
}

type actionsClient struct {
	cc grpc.ClientConnInterface
}

func NewActionsClient(cc grpc.ClientConnInterface) ActionsClient {
	return &actionsClient{cc}
}

func (c *actionsClient) Getrecord(ctx context.Context, in *GetrecordRequest, opts ...grpc.CallOption) (*GetrecordResponse, error) {
	out := new(GetrecordResponse)
	err := c.cc.Invoke(ctx, Actions_Getrecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) CheckPGdbConn(ctx context.Context, in *CheckPGdbConnRequest, opts ...grpc.CallOption) (*CheckPGdbConnResponse, error) {
	out := new(CheckPGdbConnResponse)
	err := c.cc.Invoke(ctx, Actions_CheckPGdbConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionsServer is the server API for Actions service.
// All implementations must embed UnimplementedActionsServer
// for forward compatibility
type ActionsServer interface {
	Getrecord(context.Context, *GetrecordRequest) (*GetrecordResponse, error)
	CheckPGdbConn(context.Context, *CheckPGdbConnRequest) (*CheckPGdbConnResponse, error)
	mustEmbedUnimplementedActionsServer()
}

// UnimplementedActionsServer must be embedded to have forward compatible implementations.
type UnimplementedActionsServer struct {
}

func (UnimplementedActionsServer) Getrecord(context.Context, *GetrecordRequest) (*GetrecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getrecord not implemented")
}
func (UnimplementedActionsServer) CheckPGdbConn(context.Context, *CheckPGdbConnRequest) (*CheckPGdbConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPGdbConn not implemented")
}
func (UnimplementedActionsServer) mustEmbedUnimplementedActionsServer() {}

// UnsafeActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionsServer will
// result in compilation errors.
type UnsafeActionsServer interface {
	mustEmbedUnimplementedActionsServer()
}

func RegisterActionsServer(s grpc.ServiceRegistrar, srv ActionsServer) {
	s.RegisterService(&Actions_ServiceDesc, srv)
}

func _Actions_Getrecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetrecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Getrecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actions_Getrecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Getrecord(ctx, req.(*GetrecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_CheckPGdbConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPGdbConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).CheckPGdbConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actions_CheckPGdbConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).CheckPGdbConn(ctx, req.(*CheckPGdbConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Actions_ServiceDesc is the grpc.ServiceDesc for Actions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapp.Actions",
	HandlerType: (*ActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getrecord",
			Handler:    _Actions_Getrecord_Handler,
		},
		{
			MethodName: "CheckPGdbConn",
			Handler:    _Actions_CheckPGdbConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcapp.proto",
}
